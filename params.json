{"name":"BMIS 331","tagline":"Files for BMIS 331","body":"**Chapter 5 - Methods**\r\n\r\n**5.1        Methods as Black Boxes**\r\n\r\n- Methods Sequence of instructions with a name\r\n- You've already encountered and used methods charAt() or equalsIgnoreCase()\r\n- You _call_ a method in order to execute its instructions\r\n- Book example: double z = Math.pow(2, 3);\r\n- When main calls the Math.pow method, main is temporarily suspended.\r\n- The instructions of the Math.pow method execute and compute the result.\r\n- The Math.pow method returns its result back to main and main resumes execution.\r\n- Methods can receive multiple parameters, but they return only one value.\r\n- Also possible to have methods with no parametersMath.random()\r\n- Parameter values are supplied when a method is called.\r\n- The return value is the result that the method computes\r\n- You don't need to know how the method is implemented\r\n- You just need to know the specification of the method\r\n- Methods should appear as \"black boxes\"\r\n\r\n**5.2        Implementing Methods**\r\n\r\n- When writing a method, you need to:\r\n  - Pick a name for the method (cubeVolume)\r\n  - Give a name and type for each parameter variable (double sideLength)\r\n  - Specify a type for the return value (double)\r\n  - Add the public static modifiers\r\n  - Specify the body of the method\r\n  - Contains the variable declarations and statements that are executed when the method is called.\r\n\r\n- The return statement gives the method's result to the caller\r\n- The body of a method is enclosed in braces\r\n- When the method is called with different parameter values, the method returns different results\r\n- Put the methods into a test program\r\n\r\n**Syntax 5.1        Static Method Declaration**\r\n\r\n- public static returnType methodName(parameterType parameterName, …)\r\n- Method body executed when method called\r\n- return  statement exits method and returns result\r\n\r\n**Programming Tip 5.1        Method Comments**\r\n\r\n- Always comment method behavior\r\n- Method comments explain the purpose of the method, the meaning of the parameters and return value, as well as any special requirements\r\n- Comments enclosed in /\\*\\* and \\*/ delimiters.\r\n\r\n**5.3       **  **Parameter Passing**\r\n\r\n- Parameter variables hold the parameter values supplied in the method call\r\n- When a method is called, a variable is created for each parameter ( **parameter variables** / **formal parameters** )\r\n- The method call supplies values for each parameter **parameter values** / **actual parameters** / **arguments**\r\n\r\nParameter Passing Process\r\n\r\n- Method call parameter variables created\r\n- Initializing method parameter value passed in the call\r\n- About to return to the caller method computes the expression & value stored in variable\r\n- After method call method returns. All variables are removed, including the parameter variable. Return value is transferred to the caller. The caller put the return value into a variable.\r\n\r\n**Programming Tip 5.2        Do Not Modify Parameter Variables**\r\n\r\n- Parameter variable just like any other variable\r\n- You can modify the values of parameter variables in the body of a method\r\n- However, this practice is confusing\r\n- To avoid confusion, introduce a separate variable\r\n\r\n**Common Error 5.1        Trying to Modify Arguments**\r\n\r\n- Common error: trying to modify a variable that was passed to the method\r\n- When the method returns, all of its parameter variables are removed.\r\n- In Java, a method can never change a variable of the calling method. (p. 187)\r\n\r\n**5.4        Return Values**\r\n\r\n- The return statement terminates a method call and yields the method result\r\n- Use the return statement to specify the result of a method.\r\n- When the return statement is processed, the method exits immediately.\r\n- Every branch of a method needs to return a value.\r\n\r\n\r\n\r\nTwo main types of methods: (1) instance methods and (2) class methods\r\n\r\n- Instance methods require an object to execute them\r\n- Class methods can be executed without an object declared using the keyword static\r\n- Any variable declared within a method is a local and it is only accessible within the method.\r\n- The formal parameters of a method are treated as local variables within that method.\r\n\r\n**Example:**\r\n<script src=\"https://gist.github.com/mrtimo/53a5f3e2cabd70c6b253.js\"></script>\r\n```\r\npublic class Method1\r\n{\r\n\tpublic static void main(String [] args)\r\n\t{\r\n\t\tint a = 6;\r\n\t\tint b = 4;\r\n\t\tSystem.out.println(“The minimum value is “ + showMin(a, b));\r\n\t}\r\n\r\n\tpublic static int showMin(int x, int y)\r\n\t{\r\n\t\tif (x < y)\r\n\t\t\treturn  x;\r\n\t\telse\r\n\t\t\treturn y;\r\n\t}\r\n}\r\n```\r\n\r\n- The keyword static tells us that this is a class method, and so can be executed without an object.\r\n\r\n- All methods generally have a return value. If the return value is of type void, nothing is returned and there is no return statement within the function. In this example, an int is returned.\r\n\r\n- A method is executed when it is called. Method call = showMin(a, b);\r\n\r\n- The parameters a and b are often referred to as actual parameters. The values of these are passed to the method showMin();\r\n\r\n- The method definition has parameters called x and y. These are often referred to as formal parameters. Formal parameters are variables local to the method. These parameters accept the values of a and b.\r\n\r\n- The values of x and y are used in the method and the minimum is returned back to the calling statement. This is the call-by-value parameter passing method.\r\n\r\n**Common Error 5.2        Missing Return Value**\r\n\r\n- It is a compile-time error if some branches of a method return a value and others do no.\r\n- A remedy if to add a statement return 0; to the end of the method.\r\n\r\n**How To 5.1        Implementing a Method**\r\n\r\n- A method is a computation that can be used multiple times with different parameter values, either in the same program or in different programs.\r\n- Whenever a computation is needed more than once, turn it into a method.\r\n- Step1: Describe what the method should do\r\n- Step 2: Determine the method's \"inputs\". Make a list of _all_ the parameters that can vary.\r\n- Step 3: Determine the types of the parameters and the return value.\r\n- Step 4: Write pseudocode for obtaining the desired result.\r\n- Step 5: Implement the method body\r\n- Step 6: Test the method.\r\n\r\n**5.5        Methods Without Return Values**\r\n\r\n- Use the return type of void to indicate that a method does not return a value.\r\n- Sometimes, you need to carry out a sequence of instructions that does not yield a value.\r\n- Often, this type of method doesn't compute any value, but performs some actions and then returns to the caller.\r\n- If you want to return from a void method before reaching the end, you use a return statement without a value.\r\n- For example: return; //Return immediately\r\n\r\n**5.6        Problem Solving: Reusable Methods**\r\n\r\nUse the process of stepwise refinement to decompose complex tasks into\r\n\r\n**5.7        Problem Solving: Stepwise Refinement**\r\n\r\n- Use the process of stepwise refinement to decompose complex tasks into simpler ones.\r\n- To solve a difficult task, break it down into simpler tasks.\r\n- Review class IntegerNam p. 195\r\n\r\n**Programming Tip 5.4       **  **Keep Methods Short**\r\n\r\n- Cost for writing a method\r\n- Need to design, code, and test the method. Method needs documenting.\r\n- Spend some effort to make the method reusable rather than tied into a specific context.\r\n- If a method will not fit on a single screen in the IDE, it should probably be broken up.\r\n- Keep your methods under 20 lines!!!\r\n\r\n**Programming Tip 5.5        Tracing Methods**\r\n\r\n- Carry out a manual walkthrough on complex methods before entrusting your program to the computer.\r\n- Way to understand the subtle aspects of a method\r\n\r\n**Programming Tip 5.6        Stubs**\r\n\r\n- For larger programs, it is not always feasible to implement and test all methods at once\r\n- Often need to test a method that calls another, but the other method hasn't been implemented.\r\n- You can temporarily replace the missing method with a **stub**.\r\n- The **stub** returns a simple value that is sufficient for testing another method.\r\n\r\n**5.8        Variable Scope**\r\n\r\n- The **scope** of a variable is the part of the program in which it is visible.\r\n- The scope of a variable is the **part of the program in which you can access it**.\r\n- The scope of a method's **parameter variable** is the entire method.\r\n- A variable that is defined within a method is called a **local variable**.\r\n- The scope of a local variable ranges from its declaration until the end of the block or for statement in which it is declared.\r\n-  **Note** : a variable declared in a for statement only extends to the end of the for.\r\n- Two local or parameter variables can have the same name, provided that their scopes do not overlap.\r\n\r\n**5.9        Recursive Methods (Optional)**\r\n\r\n- A recursive method is a method that calls itself.\r\n- A recursive computation solves a problem by using the solution of the same problem with simpler inputs.\r\n\r\nTwo key requirements to make sure that the recursion is successful:\r\n\r\n1. 1.Every recursive call must simplify the task in some way.\r\n2. 2.There must be special cases to handle the simplest tasks directly.\r\n\r\n- For a recursion to terminate, there must be special cases for the simplest inputs.\r\n\r\n**How To 5.2        Thinking Recursively**\r\n\r\n- Step1: Break the input into parts that can themselves be inputs to the problem.\r\n- Step 2: Combine solutions with simpler inputs into a solution of the original problem.\r\n- Step 3: Find solutions to the simplest inputs.\r\n- Step 4: Implement the solution by combining the simple cases and the reduction step.\r\n\r\n**Random Fact 5.1        The Explosive Growth of Personal Computers**\r\n\r\n- Marcian E. \"Ted\" Hoff, engineer at Intel, working on a chip for a manufacturer of electronic calculators.\r\n- Decided it would be a better idea to develop a general-purpose chip that could be programmed to interface with the keys and display of a calculator, rather than to do yet another custom design.\r\n- Microprocessor was born.\r\n- 1974 – first computer kit, the Altair 8800\r\n- First bit hit was the Apple II.\r\n\r\n**Debugger Session**\r\n\r\n- Open BlueJ and create a new class called Int\r\n- Open Blackboard and go to:\r\n- Sample Java Code / Chapter Source Code / Chapter 5 Source Code / IntegerName.java\r\n- Copy that source code into BlueJ into Int and compile\r\n- Identify the methods\r\n  - intName\r\n  - digitName\r\n  - teenName\r\n  - tensName\r\n- FYI these are **terrible** names for methods\r\n- Google \"Java naming standards\"\r\n- Methods should be in mixed case and use **verbs** to describe what the method does\r\n- Better names would be:\r\n  - getIntName\r\n  - getDigitName\r\n  - getTeenName\r\n  - getTensName\r\n- Run once to see the result\r\n- Set a halt opposite the System.out.println\r\n- Enter 525 in response to the prompt and step through the code\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}